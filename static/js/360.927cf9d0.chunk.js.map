{"version":3,"file":"static/js/360.927cf9d0.chunk.js","mappings":"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","sources":["components/buttons/mainBtn/MainBtn.jsx","components/getInTouch/GetInTouch.jsx","components/lazySection/LazySection.jsx","images/sketches/Triangle.jsx","pages/aboutUs/sections/Hero.jsx","pages/aboutUs/AboutUs.jsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import \"./MainBtn.scss\";\r\n\r\nconst MainBtn = ({ title }) => {\r\n  return <div className=\"main-btn-container\">{title}</div>;\r\n};\r\n\r\nexport default MainBtn;\r\n","import MainBtn from \"../buttons/mainBtn/MainBtn\";\r\n\r\nconst GetInTouch = () => {\r\n  return (\r\n    <div className=\"get-in-touch-section d-flex align-items-center justify-content-between\">\r\n      <div className=\"texts d-flex flex-column justify-content-between\">\r\n        <div className=\"main-section-title\">Get In Touch With Us</div>\r\n        <div className=\"text text-center\">\r\n          Ready to hire or need more information? Weâ€™re here to help.\r\n        </div>\r\n        <div\r\n          onClick={() =>\r\n            window.open(\"https://forms.gle/FwHWi69yvHyzS8Xr7\", \"_blank\")\r\n          }\r\n        >\r\n          <MainBtn title={\"Contact Us\"} />\r\n        </div>\r\n      </div>\r\n      <img src=\"/images/InTouch.png\" alt=\"InTouch\" loading=\"lazy\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetInTouch;\r\n","import React, { Suspense } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst LazySection = ({ Section }) => {\r\n  const { ref, inView } = useInView({\r\n    triggerOnce: true,\r\n    threshold: 0.1,\r\n  });\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      {inView && (\r\n        <Suspense fallback={<div>...</div>}>\r\n          <Section />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LazySection;\r\n","import \"./Sketches.scss\";\r\n\r\nconst Triangle = (props) => {\r\n  return <div className={`trinagle ${props.color} ${props.mirror}`}></div>;\r\n};\r\n\r\nexport default Triangle;\r\n","import React from \"react\";\r\nimport Triangle from \"../../../images/sketches/Triangle\";\r\nimport MainBtn from \"../../../components/buttons/mainBtn/MainBtn\";\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"hero-wrapper\">\r\n      <div className=\"d-flex justify-content-between page-section-padding gap-20 hero-section\">\r\n        <div className=\"text-wrapper\">\r\n          <div className=\"main-section-title\">\r\n            Your Trusted Partner in Labour Hire Solutions\r\n          </div>\r\n          <div className=\"desc mt-30\">\r\n            Labour Link Group is a premier labour hire provider dedicated to the\r\n            construction and civil industries. Founded with a mission to bridge\r\n            the gap between companies and the skilled labour force they need, we\r\n            leverage years of experience and deep industry knowledge to provide\r\n            workforce solutions that are both effective and efficient. Our\r\n            commitment to quality, safety, and compliance ensures your projects\r\n            are in capable hands, making us your trusted partner in labour\r\n            solutions.\r\n          </div>\r\n          <div\r\n            className=\"btn mt-30\"\r\n            onClick={() =>\r\n              window.open(\"https://forms.gle/FwHWi69yvHyzS8Xr7\", \"_blank\")\r\n            }\r\n          >\r\n            <MainBtn title={\"Contact Us\"} />\r\n          </div>\r\n        </div>\r\n        <div className=\"flex-shrink \">\r\n          <img\r\n            className=\"hero-img\"\r\n            src=\"/images/aboutUsPage/Hero.png\"\r\n            alt=\"HeroImage\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"triangles d-flex align-items-center\">\r\n        <Triangle color={\"primary\"} mirror={\"mirror\"} />\r\n        <Triangle color={\"primary\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\nimport \"./AboutUs.scss\";\r\n\r\nimport GetInTouch from \"../../components/getInTouch/GetInTouch\";\r\nimport Hero from \"./sections/Hero\";\r\nimport LazySection from \"../../components/lazySection/LazySection\";\r\nconst Vision = React.lazy(() => import(\"./sections/Vision\"));\r\nconst Values = React.lazy(() => import(\"./sections/Values\"));\r\nconst WhyUs = React.lazy(() => import(\"./sections/WhyUs\"));\r\nconst Meet = React.lazy(() => import(\"./sections/Meet\"));\r\n\r\nconst AboutUs = () => {\r\n  return (\r\n    <div className=\"about-us-container\">\r\n      <Hero />\r\n      <LazySection Section={Vision} />\r\n      <LazySection Section={Values} />\r\n      <LazySection Section={WhyUs} />\r\n      <LazySection Section={Meet} />\r\n      <GetInTouch />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutUs;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","title","_jsx","className","children","GetInTouch","_jsxs","onClick","window","open","MainBtn","src","alt","loading","Section","ref","inView","useInView","triggerOnce","threshold","Suspense","fallback","props","color","mirror","Hero","Triangle","Vision","React","Values","WhyUs","Meet","AboutUs","LazySection","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}