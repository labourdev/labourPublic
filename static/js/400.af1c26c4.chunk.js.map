{"version":3,"file":"static/js/400.af1c26c4.chunk.js","mappings":"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","sources":["components/buttons/mainBtn/MainBtn.jsx","images/icons/Location.jsx","images/icons/JobBag2.jsx","components/jobCard/JobCard.jsx","components/lazySvg/LazySvgImg.jsx","components/stepper/Stepper.jsx","components/testimonial/Testimonial.jsx","images/icons/Qoutation.jsx","images/icons/Star.jsx","images/sketches/Triangle.jsx","pages/jobSeekers/sections/Hero.jsx","pages/jobSeekers/data/jobSeekersData.js","pages/jobSeekers/sections/Benefits.jsx","pages/jobSeekers/sections/Openings.jsx","pages/jobSeekers/sections/Process.jsx","pages/jobSeekers/sections/EmployeeBenefits.jsx","pages/jobSeekers/sections/CareerAdvice.jsx","pages/jobSeekers/sections/TeamExperience.jsx","pages/jobSeekers/JobSeekers.jsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import \"./MainBtn.scss\";\r\n\r\nconst MainBtn = ({ title }) => {\r\n  return <div className=\"main-btn-container\">{title}</div>;\r\n};\r\n\r\nexport default MainBtn;\r\n","import React from \"react\";\r\n\r\nconst Location = () => {\r\n  return (\r\n    <div>\r\n      <svg\r\n        width=\"18\"\r\n        height=\"17\"\r\n        viewBox=\"0 0 18 17\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M8.99828 9.77361C8.48843 9.77361 7.99002 9.62242 7.5661 9.33916C7.14217 9.0559 6.81175 8.65329 6.61664 8.18224C6.42153 7.7112 6.37048 7.19287 6.46994 6.69282C6.56941 6.19276 6.81493 5.73342 7.17545 5.3729C7.53598 5.01238 7.99531 4.76686 8.49537 4.66739C8.99543 4.56793 9.51375 4.61898 9.98479 4.81409C10.4558 5.0092 10.8584 5.33961 11.1417 5.76354C11.425 6.18747 11.5762 6.68588 11.5762 7.19573C11.5753 7.87918 11.3035 8.53439 10.8202 9.01766C10.3369 9.50093 9.68173 9.77279 8.99828 9.77361ZM8.99828 5.64901C8.69237 5.64901 8.39333 5.73972 8.13897 5.90968C7.88461 6.07964 7.68637 6.3212 7.5693 6.60383C7.45223 6.88645 7.4216 7.19745 7.48128 7.49748C7.54096 7.79752 7.68827 8.07312 7.90459 8.28943C8.1209 8.50575 8.3965 8.65306 8.69653 8.71274C8.99657 8.77242 9.30756 8.74179 9.59019 8.62472C9.87282 8.50765 10.1144 8.3094 10.2843 8.05505C10.4543 7.80069 10.545 7.50165 10.545 7.19573C10.5446 6.78564 10.3815 6.39246 10.0915 6.10249C9.80155 5.81251 9.40838 5.64942 8.99828 5.64901Z\"\r\n          fill=\"#606060\"\r\n        />\r\n        <path\r\n          d=\"M8.99835 15.9605L4.64896 10.8311C4.58853 10.754 4.52872 10.6765 4.46954 10.5985C3.72696 9.61966 3.32565 8.4244 3.32703 7.19574C3.32703 5.69161 3.92454 4.24908 4.98812 3.18551C6.0517 2.12193 7.49422 1.52441 8.99835 1.52441C10.5025 1.52441 11.945 2.12193 13.0086 3.18551C14.0722 4.24908 14.6697 5.69161 14.6697 7.19574C14.6709 8.42381 14.2697 9.61847 13.5277 10.597L13.5272 10.5985C13.5272 10.5985 13.3725 10.8017 13.3493 10.829L8.99835 15.9605ZM5.29292 9.97726C5.29292 9.97726 5.41304 10.1361 5.44037 10.1701L8.99835 14.3663L12.561 10.1644C12.5837 10.1361 12.7043 9.97623 12.7048 9.97571C13.3118 9.17613 13.6398 8.19958 13.6385 7.19574C13.6385 5.96509 13.1496 4.78484 12.2794 3.91464C11.4092 3.04444 10.229 2.55556 8.99835 2.55556C7.7677 2.55556 6.58745 3.04444 5.71725 3.91464C4.84705 4.78484 4.35818 5.96509 4.35818 7.19574C4.35691 8.20023 4.68528 9.17739 5.29292 9.97726Z\"\r\n          fill=\"#606060\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\n\r\nconst JobBag2 = () => {\r\n  return (\r\n    <div>\r\n      <svg\r\n        width=\"14\"\r\n        height=\"13\"\r\n        viewBox=\"0 0 14 13\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M13.7477 3.80096C13.7477 3.14154 13.2155 2.60506 12.5613 2.60506H10.4521V1.74728C10.4521 1.05528 9.89362 0.49231 9.20714 0.49231H4.78962C4.10311 0.49231 3.5446 1.05528 3.5446 1.74728V2.60506H1.43543C0.781246 2.60506 0.249023 3.14154 0.249023 3.80096V5.68774C0.249023 6.03933 0.362602 6.4778 0.776316 6.9079V11.2952C0.776316 11.9547 1.30854 12.4911 1.96272 12.4911H12.034C12.6882 12.4911 13.2204 11.9547 13.2204 11.2952V6.9079C13.6339 6.47804 13.7477 6.0397 13.7477 5.68774V3.80096ZM4.33554 1.74728C4.33554 1.4949 4.53923 1.28957 4.78962 1.28957H9.20716C9.45752 1.28957 9.66122 1.4949 9.66122 1.74728V2.60506H4.33554V1.74728ZM1.03996 3.80096C1.03996 3.58115 1.21737 3.40232 1.43543 3.40232H12.5613C12.7794 3.40232 12.9568 3.58115 12.9568 3.80096V5.68774C12.9568 6.66858 11.0899 7.46901 8.36932 7.67872V7.30892C8.36932 7.08877 8.19226 6.91029 7.97385 6.91029H6.02287C5.80447 6.91029 5.6274 7.08877 5.6274 7.30892V7.67858C2.90924 7.46861 1.03996 6.66609 1.03996 5.68774V3.80096ZM7.57839 7.70755V8.22577C7.57839 8.51151 7.34775 8.744 7.06428 8.744H6.93245C6.64898 8.744 6.41834 8.51151 6.41834 8.22577V7.70755H7.57839ZM12.034 11.6939H1.96272C1.74466 11.6939 1.56725 11.515 1.56725 11.2952V7.49295C2.7448 8.10119 3.98231 8.33572 5.65208 8.47991C5.76991 9.08403 6.29912 9.54126 6.93245 9.54126H7.06428C7.69766 9.54126 8.2269 9.08398 8.34467 8.47981C9.72399 8.37911 10.9692 8.12391 11.8783 7.75308C12.0828 7.66968 12.2657 7.58257 12.4295 7.49288V11.2952C12.4295 11.515 12.2521 11.6939 12.034 11.6939Z\"\r\n          fill=\"#606060\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobBag2;\r\n","import React from \"react\";\r\nimport LazySvgImg from \"../lazySvg/LazySvgImg\";\r\nimport Location from \"../../images/icons/Location\";\r\nimport MainBtn from \"../buttons/mainBtn/MainBtn\";\r\nimport JobBag2 from \"../../images/icons/JobBag2\";\r\nimport JobBag from \"../../images/icons/JobBag\";\r\n\r\nconst JobCard = ({ card }) => {\r\n  return (\r\n    <div className=\"job-card\">\r\n      <LazySvgImg SvgComponent={JobBag} />\r\n      <div className=\"title\">{card.title}</div>\r\n      <div className=\"location-wrapper\">\r\n        <div className=\"country\">\r\n          <LazySvgImg SvgComponent={Location} /> {card.country}\r\n        </div>\r\n        |<div>{card.city}</div>|<div>{card.location}</div>\r\n      </div>\r\n      <div className=\"job-duration\">\r\n        <LazySvgImg SvgComponent={JobBag2} />\r\n        {card.duration}\r\n      </div>\r\n      <div className=\"job-type-wrapper\">\r\n        <div className=\"job-type\">{card.type}</div>\r\n        {card.isRemote && <div className=\"is-remote\">Remote</div>}\r\n      </div>\r\n      <div>{card.desc}</div>\r\n      <MainBtn title={\"Apply Now\"} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobCard;\r\n","import { useInView } from \"react-intersection-observer\";\r\n\r\nconst LazySvgImg = ({ SvgComponent }) => {\r\n  const { ref, inView } = useInView({\r\n    triggerOnce: true, // Load the SVG only once when it first comes into view\r\n    threshold: 0.1, // Trigger when 10% of the element is in view\r\n  });\r\n\r\n  return <div ref={ref}>{inView ? <SvgComponent /> : null}</div>;\r\n};\r\n\r\nexport default LazySvgImg;\r\n","import React from \"react\";\r\n\r\nconst Stepper = ({ data }) => {\r\n  return (\r\n    <div className=\"stepper-component\">\r\n      <div className=\"horizontal-line\"></div>\r\n      <div className=\"steps-wrapper d-flex justify-content-between gap-25\">\r\n        {data?.map((card, index) => (\r\n          <div key={index}>\r\n            <div className={`step ${card.color}`}>0{index + 1}</div>\r\n            <div className=\"title\">{card.title}</div>\r\n            <div>{card.desc}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stepper;\r\n","import React from \"react\";\r\nimport LazySvgImg from \"../lazySvg/LazySvgImg\";\r\nimport Qoutation from \"../../images/icons/Qoutation\";\r\nimport Star from \"../../images/icons/Star\";\r\n\r\nconst Testimonial = ({ card }) => {\r\n  return (\r\n    <div className=\"testimonial-card\">\r\n      <LazySvgImg SvgComponent={Qoutation} />\r\n      {card.desc}\r\n      <div className=\"stars\">\r\n        {Array.from({ length: 4 }).map((_, index) => (\r\n          <Star />\r\n        ))}\r\n      </div>\r\n      {card.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testimonial;\r\n","import React from \"react\";\r\n\r\nconst Qoutation = () => {\r\n  return (\r\n    <div>\r\n      <svg\r\n        width=\"30\"\r\n        height=\"27\"\r\n        viewBox=\"0 0 30 27\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M26.7439 26.2441C27.5196 26.2441 28.2635 25.9456 28.812 25.4143C29.3605 24.883 29.6686 24.1624 29.6686 23.411V16.4927C29.6686 15.7413 29.3605 15.0207 28.812 14.4894C28.2635 13.9581 27.5196 13.6596 26.7439 13.6596H22.6845C22.6845 12.6643 22.7449 11.6689 22.8658 10.6736C23.0472 9.61968 23.3494 8.68289 23.7725 7.86319C24.1956 7.04349 24.7405 6.3985 25.4074 5.92821C26.0703 5.40126 26.9165 5.13779 27.946 5.13779V0.746552C26.2536 0.746552 24.7717 1.09785 23.5005 1.80045C22.238 2.49419 21.1534 3.45483 20.3272 4.61084C19.4955 5.88331 18.883 7.2784 18.5139 8.74144C18.1407 10.3556 17.9582 12.0056 17.9699 13.6596V23.411C17.9699 24.1624 18.2781 24.883 18.8266 25.4143C19.375 25.9456 20.1189 26.2441 20.8946 26.2441H26.7439ZM9.19596 26.2441C9.97163 26.2441 10.7155 25.9456 11.264 25.4143C11.8125 24.883 12.1206 24.1624 12.1206 23.411V16.4927C12.1206 15.7413 11.8125 15.0207 11.264 14.4894C10.7155 13.9581 9.97163 13.6596 9.19596 13.6596H5.13653C5.13653 12.6643 5.19698 11.6689 5.31786 10.6736C5.50114 9.61968 5.80336 8.68289 6.22451 7.86319C6.64761 7.04349 7.19257 6.3985 7.85939 5.92821C8.52232 5.40126 9.36852 5.13779 10.398 5.13779V0.746552C8.7056 0.746552 7.22377 1.09785 5.95251 1.80045C4.69006 2.49419 3.6054 3.45483 2.77926 4.61084C1.94752 5.88331 1.33508 7.2784 0.965968 8.74144C0.592733 10.3556 0.410231 12.0056 0.421981 13.6596V23.411C0.421981 24.1624 0.730114 24.883 1.27859 25.4143C1.82707 25.9456 2.57097 26.2441 3.34664 26.2441H9.19596Z\"\r\n          fill=\"#E2E2E2\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Qoutation;\r\n","import React from \"react\";\r\n\r\nconst Star = () => {\r\n  return (\r\n    <div>\r\n      <svg\r\n        width=\"12\"\r\n        height=\"11\"\r\n        viewBox=\"0 0 12 11\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M11.6092 4.1503C11.5202 3.87734 11.2842 3.6789 10.9998 3.63747L8.11866 3.21883L6.83125 0.617519C6.57634 0.103181 5.73385 0.103181 5.47893 0.617519L4.19153 3.21883L1.31726 3.63747C1.03365 3.6789 0.797598 3.87803 0.708615 4.15111C0.619633 4.42338 0.693573 4.72285 0.899424 4.92337L2.98408 6.95526L2.49231 9.82202C2.44406 10.1048 2.56023 10.3914 2.79246 10.5604C3.02551 10.7285 3.33399 10.7505 3.5874 10.617L6.15481 9.26313L8.72973 10.617C8.83989 10.675 8.96058 10.7037 9.08045 10.7037C9.23655 10.7037 9.39264 10.6547 9.52467 10.5605C9.75702 10.3907 9.87308 10.1049 9.82482 9.82213L9.33386 6.95538L11.4185 4.92349C11.6244 4.72354 11.6982 4.42338 11.6092 4.1503Z\"\r\n          fill=\"#F9C927\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Star;\r\n","import \"./Sketches.scss\";\r\n\r\nconst Triangle = (props) => {\r\n  return <div className={`trinagle ${props.color} ${props.mirror}`}></div>;\r\n};\r\n\r\nexport default Triangle;\r\n","import React from \"react\";\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"hero-section d-flex justify-content-between page-section-padding\">\r\n      <div className=\"texts\">\r\n        <div className=\"main-section-title bolder\">Join Our Workforce</div>\r\n        <div>\r\n          At Labour Link Group, we are committed to helping skilled workers and\r\n          tradies find the right opportunities in the construction and civil\r\n          industries. Whether you're looking for a temporary job or a long-term\r\n          position, we have the connections to get you where you want to be.\r\n          Join our network and become part of a company that values hard work,\r\n          expertise, and a commitment to excellence.\r\n        </div>\r\n      </div>\r\n      <img\r\n        src=\"/labourPublic/images/jobSeekersPage/Hero.png\"\r\n        alt=\"HeroImage\"\r\n        loading=\"lazy\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import JobBag from \"../../../images/icons/JobBag\";\r\n\r\nexport const benefitsData = [\r\n  {\r\n    title: \"Access to Top Projects\",\r\n    desc: \"Connect with exciting and diverse projects in the commercial, residential, and civil construction sectors.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/1.png\",\r\n  },\r\n  {\r\n    title: \"Competitive Pay\",\r\n    desc: \"Earn competitive rates that reflect your skills and experience.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/2.png\",\r\n  },\r\n  {\r\n    title: \"Flexible Opportunities\",\r\n    desc: \"Find jobs that match your schedule, whether you’re looking for part-time, full-time, or project-based work.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/3.png\",\r\n  },\r\n  {\r\n    title: \"Career Growth\",\r\n    desc: \"Benefit from ongoing support, training, and development opportunities.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/4.png\",\r\n  },\r\n  {\r\n    title: \"Safety-First Culture\",\r\n    desc: \"Your safety and well-being are our top priorities, with comprehensive safety training and support.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/5.png\",\r\n  },\r\n];\r\n\r\nexport const jobOpeningsData = [\r\n  {\r\n    title: \"Machine Operators\",\r\n    country: \"Sydney\",\r\n    city: \"Annandale\",\r\n    location: \"Lewisham\",\r\n    duration: \"1 year\",\r\n    type: \"Full time\",\r\n    isRemote: true,\r\n    desc: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry lorem Ipsum has been the industry's standard dummy text ever since the 1500s\",\r\n    icon: JobBag,\r\n  },\r\n  {\r\n    title: \"Skilled Trades\",\r\n    country: \"Sydney\",\r\n    city: \"Annandale\",\r\n    location: \"Lewisham\",\r\n    duration: \"1 year\",\r\n    type: \"Full time\",\r\n    isRemote: true,\r\n    desc: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry lorem Ipsum has been the industry's standard dummy text ever since the 1500s\",\r\n    icon: JobBag,\r\n  },\r\n  {\r\n    title: \"Project Managers\",\r\n    country: \"Sydney\",\r\n    city: \"Annandale\",\r\n    location: \"Lewisham\",\r\n    duration: \"1 year\",\r\n    type: \"Part time\",\r\n    isRemote: false,\r\n    desc: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry lorem Ipsum has been the industry's standard dummy text ever since the 1500s\",\r\n    icon: JobBag,\r\n  },\r\n];\r\n\r\nexport const processData = [\r\n  {\r\n    title: \"Search for Jobs\",\r\n    color: \"orange\",\r\n    desc: \"We begin by thoroughly understanding your project requirements, company culture, and specific challenges.\",\r\n  },\r\n  {\r\n    title: \"Apply Online\",\r\n    color: \"secondary\",\r\n    desc: \"Submit your application with your resume and any necessary certifications.\",\r\n  },\r\n  {\r\n    title: \"Interview\",\r\n    color: \"blue\",\r\n    desc: \"If shortlisted, we’ll contact you for an interview.\",\r\n  },\r\n  {\r\n    title: \"Assessments\",\r\n    color: \"pink\",\r\n    desc: \"Complete any required assessments to showcase your skills.\",\r\n  },\r\n  {\r\n    title: \"Get Hired\",\r\n    color: \"purple\",\r\n    desc: \"Once you’re selected, start working on your next project!\",\r\n  },\r\n];\r\n\r\nexport const employeeBenefitsData = [\r\n  {\r\n    title: \"Competitive Pay\",\r\n    desc: \"Earn what you deserve for your skills and experience.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/b1.png\",\r\n  },\r\n  {\r\n    title: \"Flexible Work Schedules\",\r\n    desc: \"Choose jobs that fit your lifestyle.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/b2.png\",\r\n  },\r\n  {\r\n    title: \"Ongoing Training\",\r\n    desc: \"Continuous learning and development opportunities.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/b3.png\",\r\n  },\r\n  {\r\n    title: \"Safety Gear Provided\",\r\n    desc: \"We ensure you’re equipped with the necessary safety gear for every job.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/b4.png\",\r\n  },\r\n  {\r\n    title: \"Career Advancement\",\r\n    desc: \"Opportunities to grow and advance in your field.\",\r\n    icon: \"/labourPublic/images/jobSeekersPage/b5.png\",\r\n  },\r\n];\r\n\r\nexport const adviceData = [\r\n  {\r\n    title: \"Resume Writing Tips\",\r\n    desc: \"Learn how to craft a resume that stands out in the construction and civil industries.\",\r\n  },\r\n  {\r\n    title: \"Interview Preparation\",\r\n    desc: \"Learn how to craft a resume that stands out in the construction and civil industries.\",\r\n  },\r\n  {\r\n    title: \"Industry Insights\",\r\n    desc: \"Learn how to craft a resume that stands out in the construction and civil industries.\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { benefitsData } from \"../data/jobSeekersData\";\r\nimport MainBtn from \"../../../components/buttons/mainBtn/MainBtn\";\r\n\r\nconst Benefits = () => {\r\n  return (\r\n    <div className=\"benefits-section page-section-padding\">\r\n      <div className=\"main-section-title\">The Benefits of Working With Us</div>\r\n      <div className=\"cards d-flex align-items-center justify-content-between gap-15\">\r\n        {benefitsData?.map((card, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <img src={card.icon} alt=\"service\" loading=\"lazy\" />\r\n            <div className=\"title\">{card.title}</div>\r\n            <div>{card.desc}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"d-flex align-items-center justify-content-center\">\r\n        <MainBtn title={\"Find Your Next Job\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Benefits;\r\n","import React from \"react\";\r\nimport { jobOpeningsData } from \"../data/jobSeekersData\";\r\nimport JobCard from \"../../../components/jobCard/JobCard\";\r\n\r\nconst Openings = () => {\r\n  return (\r\n    <div className=\"job-opening-section page-section-padding\">\r\n      <div className=\"main-section-title\">Current Job Openings</div>\r\n      <div className=\"text-center mt-10\">\r\n        Explore our current job openings below. Use the filters to find jobs\r\n        that match your skills and location\r\n      </div>\r\n      <div className=\"job-openings-wrapper mt-30 d-flex gap-30\">\r\n        {jobOpeningsData?.map((card, index) => (\r\n          <div key={index}>\r\n            <JobCard card={card} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Openings;\r\n","import React from \"react\";\r\nimport Stepper from \"../../../components/stepper/Stepper\";\r\nimport { processData } from \"../data/jobSeekersData\";\r\nimport Triangle from \"../../../images/sketches/Triangle\";\r\n\r\nconst Process = () => {\r\n  return (\r\n    <div className=\"process-section\">\r\n      <div className=\"page-section-padding\">\r\n        <div className=\"main-section-title\">Application Process</div>\r\n        <div className=\"text-center mt-10\">\r\n          We’ve made the application process simple and supportive to help you\r\n          find the right job quickly\r\n        </div>\r\n        <div className=\"mt-30\">\r\n          <Stepper data={processData} />\r\n        </div>\r\n        <div className=\"text-center mt-30\">\r\n          <span className=\"bold\">Need help?</span> Our team is here to guide you\r\n          through every step of the process.\r\n        </div>\r\n      </div>\r\n      <div className=\"triangles d-flex align-items-center\">\r\n        <Triangle color={\"secondary\"} mirror={\"mirror\"} />\r\n        <Triangle color={\"secondary\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Process;\r\n","import React from \"react\";\r\nimport { employeeBenefitsData } from \"../data/jobSeekersData\";\r\n\r\nconst EmployeeBenefits = () => {\r\n  return (\r\n    <div className=\"employee-benefits page-section-padding\">\r\n      <div className=\"main-section-title\">Employee Benefits</div>\r\n      <div className=\"desc text-center mt-10\">\r\n        At Labour Link Group, we value our employees and offer a range of\r\n        benefits to support your career.\r\n      </div>\r\n      <div className=\"cards d-flex align-items-center justify-content-between gap-15\">\r\n        {employeeBenefitsData?.map((card, index) => (\r\n          <div className=\"card\" key={index}>\r\n            <img src={card.icon} alt=\"service\" loading=\"lazy\" />\r\n            <div className=\"title\">{card.title}</div>\r\n            <div>{card.desc}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeBenefits;\r\n","import React from \"react\";\r\nimport { adviceData } from \"../data/jobSeekersData\";\r\n\r\nconst CareerAdvice = () => {\r\n  return (\r\n    <div className=\"career-advice-section page-section-padding\">\r\n      <div className=\"main-section-title\">Career Advice</div>\r\n      <div className=\"desc text-center mt-10\">\r\n        We’re here to help you succeed not just in finding a job, but in\r\n        building a career. Explore our resources to get ahead:\r\n      </div>\r\n      <div className=\"cards d-flex align-items-center justify-content-between\">\r\n        {adviceData.map((card, index) => (\r\n          <div className=\"card d-flex gap-20\" key={index}>\r\n            <img\r\n              src=\"/labourPublic/images/jobSeekersPage/adviceIcon.png\"\r\n              alt=\"careerAdviceIcon\"\r\n              loading=\"lazy\"\r\n            />\r\n            <div>\r\n              <div className=\"bold\">{card.title}</div>\r\n              <div className=\"mt-10\">{card.desc}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CareerAdvice;\r\n","import React from \"react\";\r\nimport Testimonial from \"../../../components/testimonial/Testimonial\";\r\nimport { testimonialsData } from \"../../home/data/homeData\";\r\n\r\nconst TeamExperience = () => {\r\n  return (\r\n    <div className=\"team-experience-section page-section-padding\">\r\n      <div className=\"main-section-title\">Team Member Experiences</div>\r\n      <div className=\"desc text-center mt-10\">\r\n        Hear from our team members about their experiences working with Labour\r\n        Link Group.\r\n      </div>\r\n      <div className=\"mt-30 d-flex gap-20\">\r\n        {testimonialsData?.map((card, index) => (\r\n          <div key={index}>\r\n            <Testimonial card={card} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamExperience;\r\n","import React from \"react\";\r\nimport \"./JobSeekers.scss\";\r\n\r\nimport Hero from \"./sections/Hero\";\r\nimport Benefits from \"./sections/Benefits\";\r\nimport Openings from \"./sections/Openings\";\r\nimport Process from \"./sections/Process\";\r\nimport EmployeeBenefits from \"./sections/EmployeeBenefits\";\r\nimport CareerAdvice from \"./sections/CareerAdvice\";\r\nimport TeamExperience from \"./sections/TeamExperience\";\r\nimport MainBtn from \"../../components/buttons/mainBtn/MainBtn\";\r\n\r\nconst JobSeekers = () => {\r\n  return (\r\n    <div className=\"job-seekers-container\">\r\n      <Hero />\r\n      <Benefits />\r\n      <Openings />\r\n      <Process />\r\n      <EmployeeBenefits />\r\n      <CareerAdvice />\r\n      <TeamExperience />\r\n      <div className=\"bottom-banner page-section-padding d-flex align-items-center flex-column gap-25\">\r\n        <div className=\"main-section-title\">\r\n          Ready to take the next step in your career? Explore our job listings\r\n          and apply today!\r\n        </div>\r\n        <MainBtn title={\"Find Your Next Job\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobSeekers;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","title","_jsx","className","children","Location","_jsxs","width","height","viewBox","fill","xmlns","d","JobBag2","card","LazySvgImg","SvgComponent","JobBag","country","city","location","duration","type","isRemote","desc","MainBtn","ref","inView","useInView","triggerOnce","threshold","data","map","index","color","Qoutation","Array","from","length","_","Star","name","props","mirror","Hero","src","alt","loading","benefitsData","icon","jobOpeningsData","processData","employeeBenefitsData","adviceData","Benefits","Openings","JobCard","Process","Stepper","Triangle","EmployeeBenefits","CareerAdvice","TeamExperience","testimonialsData","Testimonial","JobSeekers","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}