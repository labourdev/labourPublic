{"version":3,"file":"static/js/156.b49ac5a6.chunk.js","mappings":"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","sources":["components/buttons/mainBtn/MainBtn.jsx","components/getInTouch/GetInTouch.jsx","components/lazySection/LazySection.jsx","images/icons/Qoutation.jsx","pages/employers/sections/Hero.jsx","pages/employers/sections/Services.jsx","pages/employers/Employers.jsx","pages/employers/data/employersData.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import \"./MainBtn.scss\";\r\n\r\nconst MainBtn = ({ title }) => {\r\n  return <div className=\"main-btn-container\">{title}</div>;\r\n};\r\n\r\nexport default MainBtn;\r\n","import MainBtn from \"../buttons/mainBtn/MainBtn\";\r\n\r\nconst GetInTouch = () => {\r\n  return (\r\n    <div className=\"get-in-touch-section d-flex align-items-center justify-content-between\">\r\n      <div className=\"texts d-flex flex-column justify-content-between\">\r\n        <div className=\"main-section-title\">Get In Touch With Us</div>\r\n        <div className=\"text text-center\">\r\n          Ready to hire or need more information? Weâ€™re here to help.\r\n        </div>\r\n        <div\r\n          onClick={() =>\r\n            window.open(\"https://forms.gle/FwHWi69yvHyzS8Xr7\", \"_blank\")\r\n          }\r\n        >\r\n          <MainBtn title={\"Contact Us\"} />\r\n        </div>\r\n      </div>\r\n      <img\r\n        src=\"/labourPublic/images/InTouch.png\"\r\n        alt=\"InTouch\"\r\n        loading=\"lazy\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetInTouch;\r\n","import React, { Suspense } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst LazySection = ({ Section }) => {\r\n  const { ref, inView } = useInView({\r\n    triggerOnce: true,\r\n    threshold: 0.1,\r\n  });\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      {inView && (\r\n        <Suspense fallback={<div>...</div>}>\r\n          <Section />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LazySection;\r\n","import React from \"react\";\r\n\r\nconst Qoutation = () => {\r\n  return (\r\n    <div>\r\n      <svg\r\n        width=\"30\"\r\n        height=\"27\"\r\n        viewBox=\"0 0 30 27\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          d=\"M26.7439 26.2441C27.5196 26.2441 28.2635 25.9456 28.812 25.4143C29.3605 24.883 29.6686 24.1624 29.6686 23.411V16.4927C29.6686 15.7413 29.3605 15.0207 28.812 14.4894C28.2635 13.9581 27.5196 13.6596 26.7439 13.6596H22.6845C22.6845 12.6643 22.7449 11.6689 22.8658 10.6736C23.0472 9.61968 23.3494 8.68289 23.7725 7.86319C24.1956 7.04349 24.7405 6.3985 25.4074 5.92821C26.0703 5.40126 26.9165 5.13779 27.946 5.13779V0.746552C26.2536 0.746552 24.7717 1.09785 23.5005 1.80045C22.238 2.49419 21.1534 3.45483 20.3272 4.61084C19.4955 5.88331 18.883 7.2784 18.5139 8.74144C18.1407 10.3556 17.9582 12.0056 17.9699 13.6596V23.411C17.9699 24.1624 18.2781 24.883 18.8266 25.4143C19.375 25.9456 20.1189 26.2441 20.8946 26.2441H26.7439ZM9.19596 26.2441C9.97163 26.2441 10.7155 25.9456 11.264 25.4143C11.8125 24.883 12.1206 24.1624 12.1206 23.411V16.4927C12.1206 15.7413 11.8125 15.0207 11.264 14.4894C10.7155 13.9581 9.97163 13.6596 9.19596 13.6596H5.13653C5.13653 12.6643 5.19698 11.6689 5.31786 10.6736C5.50114 9.61968 5.80336 8.68289 6.22451 7.86319C6.64761 7.04349 7.19257 6.3985 7.85939 5.92821C8.52232 5.40126 9.36852 5.13779 10.398 5.13779V0.746552C8.7056 0.746552 7.22377 1.09785 5.95251 1.80045C4.69006 2.49419 3.6054 3.45483 2.77926 4.61084C1.94752 5.88331 1.33508 7.2784 0.965968 8.74144C0.592733 10.3556 0.410231 12.0056 0.421981 13.6596V23.411C0.421981 24.1624 0.730114 24.883 1.27859 25.4143C1.82707 25.9456 2.57097 26.2441 3.34664 26.2441H9.19596Z\"\r\n          fill=\"#E2E2E2\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Qoutation;\r\n","import React from \"react\";\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"page-section-padding text-center\">\r\n      <div className=\"main-section-title\"> Introduction</div>\r\n      <div className=\"mt-20 text-center\">\r\n        At Labour Link Group, we understand that the success of your projects\r\n        hinges on having the right people in place. We specialize in providing\r\n        skilled labour solutions tailored to the unique demands of the\r\n        construction, building, and civil engineering industries. Whether you\r\n        require a single labourer for a short-term project or an entire team for\r\n        a long-term placement, we have the expertise and resources to deliver\r\n        precisely what you need.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\nimport { servicesData } from \"../data/employersData\";\r\n\r\nconst Services = () => {\r\n  return (\r\n    <div className=\"services-section page-section-padding\">\r\n      <div className=\"d-flex align-items-center justify-content-center\">\r\n        <div className=\"arrow-down\"></div>\r\n      </div>\r\n      <div className=\"main-section-title text-center\">Our Services</div>\r\n      <div className=\"text-center mt-20\">\r\n        We offer a range of labour hire and staffing solutions designed to meet\r\n        the specific needs of your projects.\r\n      </div>\r\n      <div className=\"wrapper d-flex align-items-center justify-content-between mt-30\">\r\n        <img\r\n          className=\"services-img\"\r\n          src=\"/labourPublic/images/employerPage/EmployerServices.png\"\r\n          alt=\"ServicesImage\"\r\n        />\r\n        <div className=\"data-wrapper d-flex align-items-center flex-column gap-20\">\r\n          {servicesData.map((card, index) => (\r\n            <div className=\"card d-flex align-items-center gap-20\" key={index}>\r\n              <img\r\n                className=\"service-icon\"\r\n                src={card.icon}\r\n                alt=\"service-icon\"\r\n              />\r\n              <div>\r\n                <div className=\"title bold\">{card.title}</div>\r\n                <div>{card.desc}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Services;\r\n","import React from \"react\";\r\nimport \"./Employers.scss\";\r\n\r\nimport GetInTouch from \"../../components/getInTouch/GetInTouch\";\r\nimport Hero from \"./sections/Hero\";\r\nimport Services from \"./sections/Services\";\r\nimport LazySection from \"../../components/lazySection/LazySection\";\r\n\r\nconst WhyUs = React.lazy(() => import(\"./sections/WhyUs\"));\r\nconst HowItWorks = React.lazy(() => import(\"./sections/HowItWorks\"));\r\nconst Request = React.lazy(() => import(\"./sections/Request\"));\r\nconst Cases = React.lazy(() => import(\"./sections/Cases\"));\r\nconst Testimonials = React.lazy(() => import(\"./sections/Testimonials\"));\r\n\r\nconst Employers = () => {\r\n  return (\r\n    <div className=\"employers-container\">\r\n      <Hero />\r\n      <Services />\r\n      <LazySection Section={WhyUs} />\r\n      <LazySection Section={HowItWorks} />\r\n      <LazySection Section={Request} />\r\n      <LazySection Section={Cases} />\r\n      <LazySection Section={Testimonials} />\r\n      <GetInTouch />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employers;\r\n","import Qoutation from \"../../../images/icons/Qoutation\";\r\n\r\nexport const servicesData = [\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/Services1.png\",\r\n    title: \"Flexible Labor Hire\",\r\n    desc: \"Access on-demand labour for short-term or urgent project needs.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/Services2.png\",\r\n    title: \"Long-Term Placement\",\r\n    desc: \"Secure consistent, skilled labour for your ongoing projects.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/Services3.png\",\r\n    title: \"Construction & Civil Staffing\",\r\n    desc: \"Specialized teams ready for commercial, residential, and civil projects.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/Services4.png\",\r\n    title: \"High Skilled Talents and Specialist Tradies\",\r\n    desc: \"Access to highly skilled professionals for specialized tasks.\",\r\n  },\r\n];\r\n\r\nexport const whyUsData = [\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/WhyUs1.png\",\r\n    title: \"Access to Top Talent\",\r\n    desc: \"Access on-demand labour for short-term or urgent project needs.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/WhyUs2.png\",\r\n    title: \"Industry Expertise\",\r\n    desc: \"Secure consistent, skilled labour for your ongoing projects.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/WhyUs3.png\",\r\n    title: \"Flexibility & Scalability\",\r\n    desc: \"Easily adjust your workforce according to your project demands, whether scaling up during peak periods or scaling down when things slow down.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/WhyUs4.png\",\r\n    title: \"Quality Assurance\",\r\n    desc: \"All our workers undergo rigorous vetting to ensure they meet industry standards for skill and safety.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/icons/WhyUs5.png\",\r\n    title: \"Cost-Effective Solutions\",\r\n    desc: \"Optimize your staffing budget with tailored solutions that provide maximum value without compromising on quality.\",\r\n  },\r\n];\r\n\r\nexport const howItWorksData = [\r\n  {\r\n    title: \"Understanding Your Needs\",\r\n    color: \"orange\",\r\n    desc: \"Browse our job listings to find positions that match your skills.\",\r\n  },\r\n  {\r\n    title: \"Precision Talent Matching\",\r\n    color: \"secondary\",\r\n    desc: \"Leveraging our extensive database and rigorous vetting process, we identify professionals who align perfectly with your needs.\",\r\n  },\r\n  {\r\n    title: \"Rapid Deployment\",\r\n    color: \"blue\",\r\n    desc: \"We provide the talent you need quickly, minimizing downtime and keeping your project on track.\",\r\n  },\r\n  {\r\n    title: \"Ongoing Support\",\r\n    color: \"pink\",\r\n    desc: \"Our commitment doesnâ€™t end with placement. We offer continuous support, ensuring satisfaction and addressing any concerns that arise.\",\r\n  },\r\n  {\r\n    title: \"Compliance and Safety\",\r\n    color: \"purple\",\r\n    desc: \"Every worker we place is fully compliant with industry regulations and trained in the latest safety protocols.\",\r\n  },\r\n];\r\n\r\nexport const caseStudies = [\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/Pic1.png\",\r\n    title: \"Challenges Faced\",\r\n    desc: \"Specific issues the client was dealing with.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/Pic2.png\",\r\n    title: \"Our Solution\",\r\n    desc: \"The tailored labour solution we provided.\",\r\n  },\r\n  {\r\n    icon: \"/labourPublic/images/employerPage/Pic3.png\",\r\n    title: \"Results\",\r\n    desc: \"Quantifiable outcomes, such as improved project timelines, cost savings, or enhanced productivity.\",\r\n  },\r\n];\r\n\r\nexport const clientTestimonials = [\r\n  {\r\n    icon: Qoutation,\r\n    desc: \"Labour Link Group helped us find skilled workers fast. They made the hiring process easy and efficient.\",\r\n    name: \"Construction Manager\",\r\n  },\r\n  {\r\n    icon: Qoutation,\r\n    desc: \"Weâ€™ve always had great results working with Labour Link Group. Their ability to provide vetted, high-quality staff on short notice is unmatched.\",\r\n    name: \"Operations Manager\",\r\n  },\r\n  {\r\n    icon: Qoutation,\r\n    desc: \"The team at Labour Link Group truly understands our industry and has consistently provided top talent.\",\r\n    name: \"HR Director\",\r\n  },\r\n];\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","title","_jsx","className","children","GetInTouch","_jsxs","onClick","window","open","MainBtn","src","alt","loading","Section","ref","inView","useInView","triggerOnce","threshold","Suspense","fallback","Qoutation","width","height","viewBox","fill","xmlns","d","Hero","Services","servicesData","map","card","index","icon","desc","WhyUs","React","HowItWorks","Request","Cases","Testimonials","Employers","LazySection","whyUsData","howItWorksData","color","caseStudies","clientTestimonials","name","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}